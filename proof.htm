<!DOCTYPE html>
<html>

<head>
	<title>Cor_Vous Corridor Solution Proof</title>
	<meta charset="UTF-8">
</head>

<body>
	<p>@Cor_Vous Corridor Vault Solver</p>
	<h4><a href="">[Refresh]</a></h4>
	<h4>PROOF OF CONCEPT - Solution from First Maze</h4>
	<h4><a href="/corridors">[Full]</a> <a href="verified.htm">[Verified]</a></h4>
	<div>
	<img id="cauldron" src="cauldron.png" />
	<img id="clover" src="clover.png" />
	<img id="diamond" src="diamond.png" />
	<img id="hex" src="hex.png" />
	<img id="plus" src="plus.png" />
	<img id="snake" src="snake.png" />
	</div>
	<script>
		var dataTest = [
		{"walls":[true,true,false,true,true,true],"center":"C","nodes":[["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["S","B","T","H","P","P","D"],["S","P","P","H","P","P","H"],["S","B","T","S","C","C","B"],["B","B","B","B","B","B","B"]]},
		{"walls":[true,true,false,true,false,true],"center":"C","nodes":[["B","B","B","B","B","B","B"],["S","B","T","S","C","C","B"],["T","C","H","D","H","S","B"],["P","S","C","D","T","P","H"],["D","H","D","S","P","T","T"],["B","B","B","B","B","B","B"]]},
		{"walls":[true,true,false,true,false,false],"center":"H","nodes":[["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["B","P","D","B","C","C","S"],["H","D","P","B","S","D","S"],["D","H","P","C","H","P","D"],["S","B","T","H","P","P","D"]]},

		{"walls":[true,false,true,true,false,true],"center":"S","nodes":[["B","B","B","B","B","B","B"],["D","H","D","S","P","T","T"],["T","S","C","H","H","S","T"],["C","C","H","S","C","S","S"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"]]},
		{"walls":[true,false,true,true,true,false],"center":"D","nodes":[["S","P","P","H","P","P","H"],["D","H","P","C","H","P","D"],["S","T","D","P","S","S","H"],["S","C","H","D","P","H","B"],["T","B","H","C","B","B","H"],["T","C","H","D","H","S","B"]]},
		{"walls":[true,true,true,false,true,false],"center":"P","nodes":[["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["B","P","T","D","S","B","B"],["S","S","T","C","T","D","S"],["B","P","D","B","C","C","S"]]},

		{"walls":[true,true,true,true,false,true],"center":"C","nodes":[["P","S","C","D","T","P","H"],["T","B","H","C","S","B","H"],["D","T","D","T","T","S","C"],["H","B","H","S","T","D","H"],["B","P","S","S","H","B","C"],["T","S","C","H","H","S","T"]]},
		{"walls":[true,true,false,true,true,true],"center":"P","nodes":[["H","D","P","B","S","D","S"],["S","S","T","C","T","D","S"],["T","C","S","T","S","H","H"],["C","H","D","B","P","C","H"],["D","H","H","P","T","H","T"],["S","T","D","P","S","S","H"]]},
		{"walls":[true,false,true,false,false,true],"center":"D","nodes":[["C","C","H","S","C","S","S"],["B","P","S","S","H","B","C"],["T","S","T","P","D","H","H"],["P","D","D","S","C","C","H"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"]]},

		{"walls":[true,true,false,true,false,true],"center":"P","nodes":[["S","C","H","D","P","H","B"],["D","H","H","P","T","H","T"],["B","C","T","S","P","B","B"],["D","B","S","P","T","S","D"],["B","H","P","B","D","B","T"],["D","T","D","T","T","S","C"]]},
		{"walls":[false,true,true,true,false,false],"center":"H","nodes":[["B","P","T","D","S","B","B"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["C","P","H","C","H","D","S"],["T","C","T","C","B","D","C"],["T","C","S","T","S","H","H"]]},
		{"walls":[true,false,true,true,false,true],"center":"S","nodes":[["H","B","H","S","T","D","H"],["B","H","P","B","D","B","T"],["D","D","D","H","C","D","S"],["S","T","D","S","H","P","T"],["T","C","H","P","B","B","P"],["T","S","T","P","D","H","H"]]},

		{"walls":[true,false,false,false,true,false],"center":"H","nodes":[["C","H","D","B","P","C","H"],["T","C","T","C","B","D","C"],["T","P","D","D","T","P","S"],["T","B","S","H","C","P","H"],["S","S","P","T","T","T","H"],["B","C","T","S","P","B","B"]]},
		{"walls":[false,false,false,true,true,true],"center":"C","nodes":[["P","D","D","S","C","C","H"],["T","C","H","P","B","B","P"],["P","T","H","B","H","B","B"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"]]},
		{"walls":[true,true,true,true,false,true],"center":"H","nodes":[["D","B","S","P","T","S","D"],["S","S","P","T","T","T","H"],["S","S","P","C","H","C","D"],["H","T","D","B","B","D","D"],["D","S","D","D","H","B","T"],["D","D","D","H","C","D","S"]]},

		{"walls":[true,true,true,true,true,false],"center":"P","nodes":[["C","P","H","C","H","D","S"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["B","T","P","P","C","P","H"],["T","P","D","D","T","P","S"]]},
		{"walls":[true,false,false,true,true,false],"center":"C","nodes":[["S","T","D","S","H","P","T"],["D","S","D","D","H","B","T"],["C","H","P","C","C","S","T"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["P","T","H","B","H","B","B"]]},
		{"walls":[false,true,true,true,true,true],"center":"C","nodes":[["T","B","S","H","C","P","H"],["B","T","P","P","C","P","H"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["P","P","C","T","S","P","T"],["S","S","P","C","H","C","D"]]},

		{"walls":[true,true,true,true,true,false],"center":"P","nodes":[["H","T","D","B","B","D","D"],["P","P","C","T","S","P","T"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["B","B","B","B","B","B","B"],["C","H","P","C","C","S","T"]]},
		];

		class Node {
			constructor(id, subNodes, openSides, symbol=null) {
				this.id = id;
				this.subNodes = subNodes;
				this.openSides = openSides;
				this.symbol = symbol;
			}
		}

		class SubNode {
			constructor(code = "") {
				this.code = code;
			}
		}

		var nodes = [];
		var count = 0;
		dataTest.forEach(function(data) {

			var newSubNodes = [];
			data.nodes.forEach(function(subData){
				if (subData.join('') == "BBBBBBB") {
					var newSubNode = new SubNode();
				} else {
					var newSubNode = new SubNode(subData.join(''));
				}
				newSubNodes.push(newSubNode);
			});
			
			var newOpenSides = [];
			for(i=0; i<6; i++) {
				if (!data.walls[i]) {
					newOpenSides.push(i+1);
				}
			}

			var newSymbol;
			switch(data.center) {
				case 'T':
					newSymbol = "cauldron";
					break;
				case 'C':
					newSymbol = "clover";
					break;
				case 'H':
					newSymbol = "hex";
					break;
				case 'S':
					newSymbol = "snake";
					break;
				case 'D':
					newSymbol = "diamond";
					break;
				case 'P':
					newSymbol = "plus";
					break;
				case 'B':
					newSymbol = null;
					break;
			}

			var newNode = new Node(count, newSubNodes, newOpenSides, newSymbol);
			nodes.push(newNode);
			count++;
		});


		const size = 30;
		const moveY = size * Math.sqrt(3);
		const moveX = size + size/2;

		var canvasNum = 1;
		while(nodes.length > 0) {
			var c = document.getElementById('myCanvas');
			
			var canvas = document.createElement('canvas');
			canvas.id = "canvas-"+canvasNum;
			canvas.width = 1000;
			canvas.height = 1000;
			canvas.style.border = "1px solid";

			var body = document.getElementsByTagName("body")[0];
			body.appendChild(canvas);

			var ctx = canvas.getContext('2d');
			var head = nodes.shift();
			head.x = 500;
			head.y = 500;

			drawSolution(head, nodes);
			drawHexagon(head.x, head.y, head.openSides, head.symbol);
			canvasNum++;
		}


		function drawSolution(head, targetNodes) {
			for (var i=0; i<nodes.length; i++) {
				nodeTested = nodes[i];
				newX = head.x;
				newY = head.y;
				var foundMatch = false;
				if (!head.subNodes[0].linkedNode && (head.subNodes[0].code || nodeTested.subNodes[3].code) && head.subNodes[0].code == nodeTested.subNodes[3].code) {
					head.subNodes[0].linkedNode = nodes.splice(i,1);
					nodeTested.subNodes[3].linkedNode = head;
					foundMatch = true;
					newY = newY - moveY;
				} else if (!head.subNodes[1].linkedNode && (head.subNodes[1].code || nodeTested.subNodes[4].code)  && head.subNodes[1].code == nodeTested.subNodes[4].code) {
					head.subNodes[1].linkedNode = nodes.splice(i,1);
					nodeTested.subNodes[4].linkedNode = head;
					foundMatch = true;
					newX = newX + moveX;
					newY = newY - (moveY/2);
				} else if (!head.subNodes[2].linkedNode && (head.subNodes[2].code || nodeTested.subNodes[5].code)  && head.subNodes[2].code == nodeTested.subNodes[5].code) {
					head.subNodes[2].linkedNode = nodes.splice(i,1);
					nodeTested.subNodes[5].linkedNode = head;
					foundMatch = true;
					newX = newX + moveX;
					newY = newY + (moveY/2);
				} else if (!head.subNodes[3].linkedNode && (head.subNodes[3].code || nodeTested.subNodes[0].code)  && head.subNodes[3].code == nodeTested.subNodes[0].code) {
					head.subNodes[3].linkedNode = nodes.splice(i,1);
					nodeTested.subNodes[0].linkedNode = head;
					foundMatch = true;
					newY = newY + moveY;
				} else if (!head.subNodes[4].linkedNode && (head.subNodes[4].code || nodeTested.subNodes[1].code)  && head.subNodes[4].code == nodeTested.subNodes[1].code) {
					head.subNodes[4].linkedNode = nodes.splice(i,1);
					nodeTested.subNodes[1].linkedNode = head;
					foundMatch = true;
					newX = newX - moveX;
					newY = newY + (moveY/2);
				} else if (!head.subNodes[5].linkedNode && (head.subNodes[5].code || nodeTested.subNodes[2].code)  && head.subNodes[5].code == nodeTested.subNodes[2].code) {
					head.subNodes[5].linkedNode = nodes.splice(i,1);
					nodeTested.subNodes[2].linkedNode = head;
					foundMatch = true;
					newX = newX - moveX;
					newY = newY - (moveY/2);
				}

				if (foundMatch) {
					nodeTested.x = newX;
					nodeTested.y = newY;
					drawHexagon(nodeTested.x, nodeTested.y, nodeTested.openSides, nodeTested.symbol);
					drawSolution(nodeTested, targetNodes);
				}
			}


		}

		// hexagon
		function drawHexagon(x, y, omittedSides, symbol) {
			var numberOfSides = 6,
			    Xcenter = x,
			    Ycenter = y;
			if (symbol) {
		      	var img = new Image();
		      	img.src = symbol+'.png';
		      	var imgSize = 30;
		      	var savectx = ctx;
		      	img.onload = function() {
	  				savectx.drawImage(img, x-imgSize/2, y-imgSize/2, imgSize, imgSize);
		      	}
			}

	     	var currentX = Xcenter +  size * Math.cos(0);
	     	var currentY = Ycenter +  size *  Math.sin(0);
			for (var i = 1; i <= numberOfSides; i+=1) {
					ctx.beginPath();
					ctx.moveTo (currentX, currentY);
					var nextX = Xcenter + size * Math.cos(-i * 2 * Math.PI / numberOfSides);
					var nextY = Ycenter + size * Math.sin(i * 2 * Math.PI / numberOfSides);
					ctx.lineTo (nextX, nextY);
					currentX = nextX;
					currentY = nextY;
					ctx.strokeStyle = "#000000";

					ctx.lineWidth = 1;
					if ( omittedSides.includes(((i+7) % 6) + 1) ) {
						ctx.strokeStyle = "#ffffff";
					}
					ctx.stroke();
			}
		}


	</script>
</body>

</html>